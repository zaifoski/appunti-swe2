----------------------------
----------------------------
VERSIONING
----------------------------
----------------------------
- sw -> ha tante versioni
- se arriva un bug mentre lavoro a una nuova feature
  risolvo i bug lavorando sulla vecchia versione, sfruttando i branches
- staging area = indice che dice a repository che lo aggiungo all'elenco
  files da dopo aggiornare
- git add -A per aggiungere tutti i file, anche le eliminazioni

VIDEO: https://youtu.be/0fKg7e37bQE
       + secondo tutorial per lavorare con branches

- git clone https://github.com/zaifoski/trentose-bdt trentose-carlo

se al push mi dà errore faccio git pull
se non riesce a fare automerging rileva un conflict

git branch -d feature-branch #per cancellare branch
#per sul server non si ricorda

git push -u origin feature-social #per pushare il nuovo branch

quando la repository feature-social funziona voglio portare il cambiamento
su master. per farlo devo prima fare un merge da master:
git merge feature-social
e poi fare git push

merge per aggiungere il branch fix al branch deature social

di solito ogni bug ha un id

eBay
              v1 v1.1   v2
master  () () () ()     ()
feature social() () ()


problema, soluzione di base, più nuova modifica in altro branch
<<<<<<< HEAD
cio che hai in locale
||||||| merged common ancestors
=======
cio che c'è sul server
>>>>>>> commit fatto da me

- fork
  git clone url-dove-c'e'-scritto-clone nomecartella
  git branch my-feature
  git push -u origin my-feature
  git checkout my-feature
  ...lavoro...
  git add -A
  git commit -m "add my-feature"
  git push
  git checkout master
  git merge my-feature
  git push

- git checkout -b social-feature origin/social-feature
  
  =

  git fetch
  git checkout social-feature

  cioè faccio il checkout ad un branch che non ho creato io e
  del quale non ho ancora traccia in locale

SEQUENZA PER ESAME
  fork (così traccia) -> clone -> develop -> push del branch ->
  lavoro qui -> push -> master -> merge -> push
  il discorso del commit lo controlla solo se c'è nella richiesta

  -u indica che faccio il push della branch
--------------------------------
http://gitready.com/intermediate/2009/02/12/easily-fetching-upstream-changes.html
--------------------------------
Configuring a remote for a fork
--------------------------------

git remote -v
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)

git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git

git remote -v
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)

--------------------------------

git remote add upstream https://github.com/mbaezpy/trentose-mailfilter.git
git fetch upstream
git checkout -b sprint2 upstream/sprint2

--------------------------------

When you fork, "origin" becomes your own repo, you need to do a couple of things in order to checkout a remote branch from the original owner.

Initially, you would have only your own repository as "remote" when working locally. Your repo is identified as "origin". Try this and you'll see:

git remote -v


1- First, you should add a new remote that points to the upstream of the original repository.

git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git

so:
git remote add upstream https://github.com/mbaezpy/trentose-mailfilter.git

try again: git remote -v and you will see the original repository linked as "upstream"

2- You should fetch the branches from upstream (essentially update you local metadata)

git fetch upstream

3- You should checkout the branch but instead of referencing "origin" (as we usually do) point to "upstream"

git checkout -b sprint2 upstream/sprint2

4- Push it to your repository.  What you have done was essentially to checkout locally a remote branch from the forked repository. To publish it on your remote repo, you should push it to "origin"

git push -u origin sprint2